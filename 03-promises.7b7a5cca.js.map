{"mappings":"YAoBA,SAASA,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,QAAQC,IAAIJ,GAEI,IAAIK,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLR,EACFG,QAAQC,IAAIE,EAAQ,uBAAwCG,OAAfX,EAAS,QAAYW,OAANV,EAAM,QAExDC,GACVO,EAAO,sBAAuCE,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,GAErD,I,IA9ByQW,KAAzQ,CACLC,KAAMC,SAASC,cAAc,SAC7BC,UAAWF,SAASC,cAAc,gBAClCE,SAAUH,SAASC,cAAc,uBACjCG,QAASJ,SAASC,cAAc,sBAChCI,UAAWL,SAASC,cAAc,yBA6BpCH,KAAKC,KAAKO,iBAAiB,UA1B3B,SAAqBC,GACnBA,EAAEC,iBAIF,IAHA,IAAMC,EAAgBC,OAAOZ,KAAKK,SAASQ,OAErCC,GADeF,OAAOZ,KAAKM,QAAQO,OAClBD,OAAOZ,KAAKO,UAAUM,QACpCE,EAAI,EAAGA,EAAID,EAAgBC,GAAK,EACvC5B,EAAc4B,EAAGJ,E,IA8BrBlB,QAAQC,IAAI,WACZD,QAAQC,IAAI,K","sources":["src/js/03-promises.js"],"sourcesContent":["//* Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\nrefs = {\n  form: document.querySelector('.form'),\n  submitBtn: document.querySelector('button[type]'),\n  delayInp: document.querySelector('input[name=\"delay\"]'),\n  stepInp: document.querySelector('input[name=\"step\"]'),\n  amountInp: document.querySelector('input[name=\"amount\"]'),\n};\n\nfunction onSubmitBtn(e) {\n  e.preventDefault();\n  const delayInpValue = Number(refs.delayInp.value);\n  const stepInpValue = Number(refs.stepInp.value);\n  const amountInpValue = Number(refs.amountInp.value);\n  for (let i = 1; i < amountInpValue; i += 1) {\n    createPromise(i, delayInpValue);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  console.log(shouldResolve);\n\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        console.log(resolve(`✅ Fulfilled promise ${position} in ${delay}ms`));\n        // resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else if (!shouldResolve) {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, 500);\n  });\n}\n\nrefs.form.addEventListener('submit', onSubmitBtn);\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\nconsole.log('message');\nconsole.log('=)');\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","console","log","Promise","resolve","reject","setTimeout","concat","refs","form","document","querySelector","submitBtn","delayInp","stepInp","amountInp","addEventListener","e","preventDefault","delayInpValue","Number","value","amountInpValue","i"],"version":3,"file":"03-promises.7b7a5cca.js.map"}